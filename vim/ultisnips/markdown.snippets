extends markdown, md, all, _

snippet ;date "date" iA
[date]: # (`date +%d.%m.%y`)

endsnippet

priority 100
snippet ... "ldots" iA
 \ldots 
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet => "implies" i
\implies
endsnippet

snippet =< "implied by" i
\impliedby
endsnippet

snippet iff "iff" i
\iff
endsnippet

priority 10
snippet $ "Math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

priority 20
snippet $$ "Math" w
$$ ${1:${VISUAL}} $$
$0
endsnippet

snippet \( "Math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet \[ "Math" w
$$ ${1:${VISUAL}} $$
$0
endsnippet

snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

snippet \/ "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# snippet / "Fraction" i
# \\frac{${VISUAL}}{$1}$0
# endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() frac" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wr
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet != "equals" iA
\neq 
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" i
\left<${1:${VISUAL}} \right>$0
endsnippet

snippet conj "conjugate" i
\overline{$1}$0
endsnippet

snippet dint "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

snippet 'z "zeta" wA
\zeta
endsnippet

# snippet sum "sum" w
# \sum_{n=${1:0}}^{${3:\infty}} ${4:${VISUAL}} $0
# endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet sr "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

snippet sq "^2" i
^2
endsnippet

snippet cb "^3" i
^3
endsnippet

snippet td "to the ... power" i
^{$1}$0
endsnippet

snippet rd "to the ... power" i
^{($1)}$0
endsnippet

snippet ^ "superscript" i
^{$1}$0
endsnippet

snippet _ "subscript" i
_{$1}$0
endsnippet

snippet ooo "\infty" i
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" i
\le 
endsnippet

snippet >= "geq" i
\ge 
endsnippet

snippet EE "geq" i
\exists 
endsnippet

snippet AA "forall" i
\forall 
endsnippet

snippet xnn "xn" i
x_{n}
endsnippet

snippet ynn "yn" i
y_{n}
endsnippet

snippet xii "xi" i
x_{i}
endsnippet

snippet yii "yi" i
y_{i}
endsnippet

snippet xjj "xj" i
x_{j}
endsnippet

snippet yjj "yj" i
y_{j}
endsnippet

snippet xp1 "x" i
x_{n+1}
endsnippet

snippet xmm "x" i
x_{m}
endsnippet

snippet lll "l" i
\ell
endsnippet

priority 100
snippet * "cdot" i
\cdot 
endsnippet

snippet ** "cdot" iA
\cdot 
endsnippet

priority 200
snippet '\cdot *' "cdot" iA
***
endsnippet

snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 100
snippet -> "to" i
\to 
endsnippet

priority 200
snippet <-> "leftrightarrow" i
\leftrightarrow
endsnippet

snippet !> "mapsto" i
\mapsto 
endsnippet

snippet invs "inverse" i
^{-1}
endsnippet

snippet compl "complement" i
^{c}
endsnippet

snippet >> ">>" i
\gg
endsnippet

snippet << "<<" i
\ll
endsnippet

snippet DD "delta" i
\Delta 
endsnippet

snippet ~~ "~" i
\sim 
endsnippet

snippet set "set" w
\\{$1\\} $0
endsnippet

snippet || "mid" i
 \mid 
endsnippet

snippet notin "not in " i
\not\in 
endsnippet

snippet inn "in " i
\in 
endsnippet

snippet NN "n" i
\N
endsnippet

snippet Nn "cap" i
\cap 
endsnippet

snippet UU "cup" i
\cup 
endsnippet

snippet uuu "bigcup" i
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" i
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" i
\O
endsnippet

snippet RR "real" i
\R
endsnippet

snippet QQ "Q" i
\Q
endsnippet

snippet ZZ "Z" i
\Z
endsnippet

snippet <! "normal" i
\triangleleft 
endsnippet

snippet <> "hokje" i
\diamond 
endsnippet

priority 10
snippet "bar" "bar" ri
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" ri
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" ri
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# vim:ft=snippets
